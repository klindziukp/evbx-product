plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "2.8"
    id "org.flywaydb.flyway" version "6.3.1"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'

group = 'com.evbx.product'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    mavenCentral()
    mavenLocal()
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    testCompile 'com.h2database:h2:1.4.199'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    testImplementation 'org.springframework.security:spring-security-test'
    runtimeOnly 'mysql:mysql-connector-java'
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.commons:commons-lang3:3.0'
}

flyway {
    url = 'jdbc:mysql://localhost:3306/evbx_product'
    user = 'root'
    password = 'root'
}

test {
    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectKey", "klindziukp_evbx-product"
        property "sonar.exclusions", "**/apiclient/**,**/config/**,**/constant/**,**/exception/**,**/model/**,**/util/**,**/ApiClientServiceImpl.java,**/EvbxProductApplication.java"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        def classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/apiclient/**',
                    '**/config/**',
                    '**/constant/**',
                    '**/exception/**',
                    '**/model/**',
                    '**/util/**',
                    '**/*ApiClientServiceImpl*.*',
                    '**/*EvbxProductApplication*.*'
            ])
        })
    }
}

check.dependsOn jacocoTestReport
